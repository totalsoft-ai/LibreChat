name: Deploy Environment - Totalsoft Local 

on:     
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - dev
      imageName:
        description: 'Docker image name'
        required: false
        type: string
        default: 'ts-librechat'


jobs:
  build-and-deploy:
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Set image tag based on environment
      id: set-tag
      shell: pwsh
      run: |
        $environment = "${{ github.event.inputs.environment }}"
        if (-not [string]::IsNullOrEmpty($environment)) {
          if ($environment -eq "production") {
            echo "IMAGE_TAG=latest" >> $env:GITHUB_OUTPUT
            echo "NS=librechat" >> $env:GITHUB_OUTPUT
            echo "RELEASE=librechat" >> $env:GITHUB_OUTPUT
          } elseif ($environment -eq "dev") {
            echo "IMAGE_TAG=dev" >> $env:GITHUB_OUTPUT
            echo "NS=librechat-dev" >> $env:GITHUB_OUTPUT
            echo "RELEASE=librechat-dev" >> $env:GITHUB_OUTPUT
          }
        }
        exit 0

    - name: Select values file for DEV only
      if: ${{ github.event.inputs.environment == 'dev' }}
      shell: pwsh
      run: |
        Copy-Item "custom\config\k8s\custom-values_dev.yaml" "custom\config\k8s\custom-values.yaml" -Force

    
    
    - name: Run build and deploy script
      shell: pwsh
      run: |
        $secretsHashtable = @{
          "MONGO_URI" = "${{ secrets.MONGO_URI }}"
          "CREDS_KEY" = "${{ secrets.CREDS_KEY }}"
          "CREDS_IV" = "${{ secrets.CREDS_IV }}"
          "JWT_SECRET" = "${{ secrets.JWT_SECRET }}"
          "JWT_REFRESH_SECRET" = "${{ secrets.JWT_REFRESH_SECRET }}"
          "SESSION_SECRET" = "${{ secrets.SESSION_SECRET }}"
          "AZURE_OPENAI_API_KEY" = "${{ secrets.AZURE_OPENAI_API_KEY }}"
          "EMAIL_PASSWORD" = "${{ secrets.EMAIL_PASSWORD }}"
          "REGISTRY_USERNAME" = "${{ secrets.REGISTRY_USERNAME }}"
          "REGISTRY_PASSWORD" = "${{ secrets.REGISTRY_PASSWORD }}"
          "GOOGLE_SEARCH_API_KEY" = "${{ secrets.GOOGLE_SEARCH_API_KEY }}"
          "GOOGLE_CSE_ID" = "${{ secrets.GOOGLE_CSE_ID }}"
          "MCP_ATLASSIAN_JIRA_TOKEN" = "${{ secrets.MCP_ATLASSIAN_JIRA_TOKEN }}"
          "MCP_FIGMA_API_KEY" = "${{ secrets.MCP_FIGMA_API_KEY }}"
          "BEDROCK_AWS_DEFAULT_REGION" = "${{ secrets.BEDROCK_AWS_DEFAULT_REGION }}"
          "BEDROCK_AWS_ACCESS_KEY_ID" = "${{ secrets.BEDROCK_AWS_ACCESS_KEY_ID }}"
          "BEDROCK_AWS_SECRET_ACCESS_KEY" = "${{ secrets.BEDROCK_AWS_SECRET_ACCESS_KEY }}"
          "AWS_ACCESS_KEY_ID" = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          "AWS_SECRET_ACCESS_KEY" = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          "AWS_DEFAULT_REGION" = "${{ secrets.AWS_DEFAULT_REGION }}"
          "ASSISTANT_WITH_K_APIKEY" = "${{ secrets.ASSISTANT_WITH_K_APIKEY }}"
          "KEYCLOAK_CLIENT_SECRET" = "${{ secrets.KEYCLOAK_CLIENT_SECRET }}"
          "OPENID_CLIENT_SECRET" = "${{ secrets.OPENID_CLIENT_SECRET }}"
          "OPENID_SESSION_SECRET" = "${{ secrets.OPENID_SESSION_SECRET }}"
          "ORCHESTRATOR_API_KEY" = "${{ secrets.ORCHESTRATOR_API_KEY }}"
        }

        $envVarsHashtable = @{
          "EMAIL_FROM" = "${{ vars.EMAIL_FROM }}"
          "EMAIL_FROM_NAME" = "${{ vars.EMAIL_FROM_NAME }}"
          "EMAIL_USERNAME" = "${{ vars.EMAIL_USERNAME }}"
          "EMAIL_HOST" = "${{ vars.EMAIL_HOST }}"
          "EMAIL_PORT" = "${{ vars.EMAIL_PORT }}"
          "EMAIL_ENCRYPTION" = "${{ vars.EMAIL_ENCRYPTION }}"
          "DOMAIN_CLIENT" = "${{ vars.DOMAIN_CLIENT }}"
          "DOMAIN_SERVER" = "${{ vars.DOMAIN_SERVER }}"
          "AZURE_OPENAI_INSTANCE" = "${{ vars.AZURE_OPENAI_INSTANCE }}"
          "ENDPOINTS" = "${{ vars.ENDPOINTS }}"
          "MCP_ATLASSIAN_JIRA_URL" = "${{ vars.MCP_ATLASSIAN_JIRA_URL }}"
          "MCP_ATLASSIAN_JIRA_USERNAME" = "${{ vars.MCP_ATLASSIAN_JIRA_USERNAME }}"
          "CODE_REVIEW_API_URL" = "${{ vars.CODE_REVIEW_API_URL }}"
          "DOCUMENT_LOADER_BASE_URL" = "${{ vars.DOCUMENT_LOADER_BASE_URL }}"
          "DOCUMENT_FLOW_API_URL" = "${{ vars.DOCUMENT_FLOW_API_URL }}"
          "DOCUMENT_SUMMARIZER_API_URL" = "${{ vars.DOCUMENT_SUMMARIZER_API_URL }}"
          "TEXT_TRANSLATOR_API_URL" = "${{ vars.TEXT_TRANSLATOR_API_URL }}"
          "WEB_SCRAPING_API_URL" = "${{ vars.WEB_SCRAPING_API_URL }}"
          "ASSISTANT_WITH_K_BASEURL" = "${{ vars.ASSISTANT_WITH_K_BASEURL }}"
          "ASSISTANT_WITH_K_MODELS" = "${{ vars.ASSISTANT_WITH_K_MODELS }}"
          "LOCAL_MODELS_BASEURL" = "${{ vars.LOCAL_MODELS_BASEURL }}"
          "MCP_SERVER_BASEURL" = "${{ vars.MCP_SERVER_BASEURL }}"
          "KEYCLOAK_CLIENT_ID" = "${{ vars.KEYCLOAK_CLIENT_ID }}"
          "LIBRECHAT_REDIRECT_BASEURL" = "${{ vars.LIBRECHAT_REDIRECT_BASEURL }}"
          "OPENID_CLIENT_ID" = "${{ vars.OPENID_CLIENT_ID }}"
          "OPENID_ISSUER" = "${{ vars.OPENID_ISSUER }}"
          "ORCHESTRATOR_URL" = "${{ vars.ORCHESTRATOR_URL }}"
          "EMBEDDINGS_API_URL" = "${{ vars.EMBEDDINGS_API_URL }}"
        }

        ./custom/scripts/build-and-deploy.ps1 `
          -ImageName "${{ github.event.inputs.imageName }}" `
          -ImageTag "${{ steps.set-tag.outputs.IMAGE_TAG }}" `
          -Registry "registry.totalsoft.local" `
          -Namespace "${{ steps.set-tag.outputs.NS }}" `
          -HelmReleaseName "${{ steps.set-tag.outputs.RELEASE }}" `
          -RegistryUsername "${{ secrets.REGISTRY_USERNAME }}" `
          -RegistryPassword "${{ secrets.REGISTRY_PASSWORD }}" `
          -Secrets $secretsHashtable `
          -EnvVars $envVarsHashtable
